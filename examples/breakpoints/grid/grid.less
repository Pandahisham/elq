@import "grid-clearfix.less";
@import "grid-normalize.less";
@import "grid-vendor-prefixes.less";
@import "grid-scaffolding.less";
@import "grid-variables.less";
@import "grid-framework.less";
@import "grid-mixins.less";


//
// Grid system
// --------------------------------------------------

@screen-sm-min-value: unit(@screen-sm-min);
@screen-md-min-value: unit(@screen-md-min);
@screen-lg-min-value: unit(@screen-lg-min);

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

.container {
  .container-fixed();

  .elq-width-above-@{screen-sm-min-value} > & {
    width: @container-sm;
  }
  .elq-width-above-@{screen-md-min-value} > & {
    width: @container-md;
  }
  .elq-width-above-@{screen-lg-min-value} > & {
    width: @container-lg;
  }
}

// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid {
  .container-fixed();
}


// Row
//
// Rows contain and clear the floats of your columns.

.row {
  .make-row();
}


// Columns
//
// Common styles for small and large grid columns

.make-grid-columns();


// Extra small grid
//
// Columns, offsets, pushes, and pulls for extra small devices like
// smartphones.

.row {
  .make-grid(xs);
}


// Small grid
//
// Columns, offsets, pushes, and pulls for the small device range, from phones
// to tablets.

.elq-width-above-@{screen-sm-min-value} > .row {
  .make-grid(sm);
}

// Medium grid
//
// Columns, offsets, pushes, and pulls for the desktop device range.

.elq-width-above-@{screen-md-min-value} > .row {
  .make-grid(md);
}


// Large grid
//
// Columns, offsets, pushes, and pulls for the large desktop device range.

.elq-width-above-@{screen-lg-min-value} > .row {
  .make-grid(lg);
}